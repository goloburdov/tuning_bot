import os
import json
import logging
from uuid import uuid4
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler
)
from dotenv import load_dotenv
from flask import Flask

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Webhook (–¥–ª—è Render)
app = Flask(__name__)
telegram_app = ApplicationBuilder().token(TOKEN).build()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
DATA_FILE = "user_data.json"
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({}, f)


def load_data():
    with open(DATA_FILE, 'r') as f:
        try:
            return json.load(f)
        except:
            return {}


def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    data = load_data()

    ref = context.args[0] if context.args else None
    if user_id not in data:
        data[user_id] = {"gens": 2, "ref_by": ref, "refers": []}
        if ref and ref in data:
            data[ref]["gens"] += 1
            data[ref]["refers"].append(user_id)
    save_data(data)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –£ —Ç–µ–±—è {data[user_id]['gens']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–ª—å—à–µ!"
    )


async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()

    if data.get(user_id, {}).get("gens", 0) <= 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üò¢")
        return

    data[user_id]["gens"] -= 1
    save_data(data)

    await update.message.reply_text("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—é–Ω–∏–Ω–≥... (—Ç—É—Ç –±—É–¥–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞)")
    # –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    await update.message.reply_text(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {data[user_id]['gens']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")


async def refer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    await update.message.reply_text(
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{context.bot.username}?start={user_id}"
    )


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    if user_id not in data:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–±–µ.")
        return

    await update.message.reply_text(
        f"üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {data[user_id]['gens']}\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {len(data[user_id].get('refers', []))}"
    )


async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return await update.message.reply_text("–¢—ã –Ω–µ –∞–¥–º–∏–Ω üòé")

    data = load_data()
    total_users = len(data)
    total_gens = sum([user.get("gens", 0) for user in data.values()])
    await update.message.reply_text(
        f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–°—É–º–º–∞—Ä–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total_gens}"
    )


# Flask –≤–µ–±—Ö—É–∫–∏
@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route(f'/{TOKEN}', methods=["POST"])
def webhook():
    from flask import request
    telegram_app.update_queue.put_nowait(Update.de_json(request.get_json(force=True), telegram_app.bot))
    return "ok"


# –•–µ–Ω–¥–ª–µ—Ä—ã
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("gen", generate))
telegram_app.add_handler(CommandHandler("generate", generate))
telegram_app.add_handler(CommandHandler("ref", refer))
telegram_app.add_handler(CommandHandler("stats", stats))
telegram_app.add_handler(CommandHandler("admin", admin))