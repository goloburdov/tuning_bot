import os
import json
import random
import logging
from uuid import uuid4
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
import openai

# ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
openai.api_key = os.environ["OPENAI_API_KEY"]
TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
ADMIN_ID = 75729723

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"

def load_user_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_user_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

user_data = load_user_data()

# ===========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
# ===========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"generations": 2, "referrals": []}
        save_user_data(user_data)

    ref = context.args[0] if context.args else None
    if ref and ref != user_id and ref not in user_data[user_id]["referrals"]:
        if ref in user_data:
            user_data[ref]["generations"] += 1
            user_data[ref]["referrals"].append(user_id)
            save_user_data(user_data)
        await update.message.reply_text("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º! –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.")
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã, –∏ —è –¥–æ–±–∞–≤–ª—é —Ç—é–Ω–∏–Ω–≥ ü§ñ")

# ===========================
# –ê–¥–º–∏–Ω–∫–∞
# ===========================
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    stats = "\n".join([
        f"{uid}: {data['generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, {len(data['referrals'])} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        for uid, data in user_data.items()
    ])
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{stats}")

# ===========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
# ===========================
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {"generations": 2, "referrals": []}
        save_user_data(user_data)

    if user_data[user_id]["generations"] <= 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë.")
        return

    await update.message.reply_text("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    file_path = f"/tmp/{uuid4()}.png"
    await photo_file.download_to_drive(file_path)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI
    with open(file_path, "rb") as image_file:
        response = openai.images.create_variation(
            image=image_file,
            n=1,
            size="1024x1024"
        )

    image_url = response.data[0].url
    await update.message.reply_photo(image_url, caption="üöó –í–æ—Ç —Ç–≤–æ—è –º–∞—à–∏–Ω–∞ —Å —Ç—é–Ω–∏–Ω–≥–æ–º!")

    user_data[user_id]["generations"] -= 1
    save_user_data(user_data)

# ===========================
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ===========================
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

if __name__ == "__main__":
    main()